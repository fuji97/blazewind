@using Blazewind.Core.Helpers
@using System.Diagnostics
@using Blazewind.Core.Models
@inherits BlazewindDomComponent

<button type="button" @onclick="@Click" disabled="@IsDisabled"
        class="@_finalClass">
    @if (IsLoading) {
        <svg aria-hidden="true" role="status" class="inline w-4 h-4 mr-3 text-white animate-spin" viewBox="0 0 100 101" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M100 50.5908C100 78.2051 77.6142 100.591 50 100.591C22.3858 100.591 0 78.2051 0 50.5908C0 22.9766 22.3858 0.59082 50 0.59082C77.6142 0.59082 100 22.9766 100 50.5908ZM9.08144 50.5908C9.08144 73.1895 27.4013 91.5094 50 91.5094C72.5987 91.5094 90.9186 73.1895 90.9186 50.5908C90.9186 27.9921 72.5987 9.67226 50 9.67226C27.4013 9.67226 9.08144 27.9921 9.08144 50.5908Z" fill="#E5E7EB"/>
            <path d="M93.9676 39.0409C96.393 38.4038 97.8624 35.9116 97.0079 33.5539C95.2932 28.8227 92.871 24.3692 89.8167 20.348C85.8452 15.1192 80.8826 10.7238 75.2124 7.41289C69.5422 4.10194 63.2754 1.94025 56.7698 1.05124C51.7666 0.367541 46.6976 0.446843 41.7345 1.27873C39.2613 1.69328 37.813 4.19778 38.4501 6.62326C39.0873 9.04874 41.5694 10.4717 44.0505 10.1071C47.8511 9.54855 51.7191 9.52689 55.5402 10.0491C60.8642 10.7766 65.9928 12.5457 70.6331 15.2552C75.2735 17.9648 79.3347 21.5619 82.5849 25.841C84.9175 28.9121 86.7997 32.2913 88.1811 35.8758C89.083 38.2158 91.5421 39.6781 93.9676 39.0409Z" fill="currentColor"/>
        </svg>
    }
    @ChildContent
</button>

@code {
    private string _finalClass = string.Empty;

    protected override string BaseClass => "focus:ring-4 font-medium mr-2 mb-2 focus:outline-none";

    [Parameter]
    public bool Custom { get; set; } = false;

    [Parameter]
    public RenderFragment ChildContent { get; set; } = null!;

    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public ButtonType Type { get; set; } = ButtonType.Default;

    [Parameter]
    public ButtonRoundness Roundness { get; set; } = ButtonRoundness.Default;

    [Parameter]
    public bool Outline { get; set; } = false;

    [Parameter]
    public ButtonSize Size { get; set; } = ButtonSize.Base;

    [Parameter]
    public bool Flex { get; set; } = false;

    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }
    
    [Parameter]
    public EventCallback<MouseEventArgs> OnClickAsync { get; set; }

    [Parameter]
    public bool Loading { get; set; } = false;

    [Parameter]
    public Task? Task { get; set; } = null;
    
    [Parameter]
    public bool DisabledWhenLoading { get; set; } = true;
    
    private bool _taskLoading = false;
    private bool _clickLoading = false;
    
    private bool IsLoading => Loading || _taskLoading || _clickLoading;
    private bool IsDisabled => Disabled || (DisabledWhenLoading && IsLoading);

    private string ColorClasses => Type switch {
        ButtonType.Default => "text-white bg-primary-700 hover:bg-primary-800 focus:ring-primary-300 dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800",
        ButtonType.Alternative => "text-gray-900 bg-white border-gray-200 hover:bg-gray-100 hover:text-primary-700 focus:ring-gray-200 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700",
        ButtonType.Dark => "text-white bg-gray-800 hover:bg-gray-900 focus:ring-gray-300 dark:bg-gray-800 dark:hover:bg-gray-700 dark:focus:ring-gray-700 dark:border-gray-700",
        ButtonType.Light => "text-gray-900 bg-white border-gray-300 hover:bg-gray-100 focus:ring-gray-200 dark:bg-gray-800 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-600 dark:focus:ring-gray-700",
        ButtonType.Success => "text-white bg-success-700 hover:bg-success-800 focus:ring-success-300 dark:bg-success-600 dark:hover:bg-success-700 dark:focus:ring-success-800",
        ButtonType.Info => "text-white bg-info-700 hover:bg-info-800 focus:ring-info-300 dark:bg-info-600 dark:hover:bg-info-700 dark:focus:ring-info-800",
        ButtonType.Warning => "text-white bg-warning-700 hover:bg-warning-800 focus:ring-warning-300 dark:bg-warning-600 dark:hover:bg-warning-700 dark:focus:ring-warning-800",
        ButtonType.Danger => "text-white bg-danger-700 hover:bg-danger-800 focus:ring-danger-300 dark:bg-danger-600 dark:hover:bg-danger-700 dark:focus:ring-danger-800",
        _ => string.Empty
        };

    private string OutlineClasses => Type switch {
        ButtonType.Default => "text-primary-700 hover:text-white border border-primary-700 hover:bg-primary-800 focus:ring-primary-300 dark:border-primary-500 dark:text-primary-500 dark:hover:text-white dark:hover:bg-primary-500 dark:focus:ring-primary-800",
        ButtonType.Alternative or ButtonType.Dark or ButtonType.Light => 
            "text-gray-700 hover:text-white border border-gray-700 hover:bg-gray-800 focus:ring-gray-300 dark:border-gray-500 dark:text-gray-500 dark:hover:text-white dark:hover:bg-gray-500 dark:focus:ring-gray-800",
        ButtonType.Success => "text-success-700 hover:text-white border border-success-700 hover:bg-success-800 focus:ring-success-300 dark:border-success-500 dark:text-success-500 dark:hover:text-white dark:hover:bg-success-500 dark:focus:ring-success-800",
        ButtonType.Info => "text-info-700 hover:text-white border border-info-700 hover:bg-info-800 focus:ring-info-300 dark:border-info-500 dark:text-info-500 dark:hover:text-white dark:hover:bg-info-500 dark:focus:ring-info-800",
        ButtonType.Warning => "text-warning-700 hover:text-white border border-warning-700 hover:bg-warning-800 focus:ring-warning-300 dark:border-warning-500 dark:text-warning-500 dark:hover:text-white dark:hover:bg-warning-500 dark:focus:ring-warning-800",
        ButtonType.Danger => "text-danger-700 hover:text-white border border-danger-700 hover:bg-danger-800 focus:ring-danger-300 dark:border-danger-500 dark:text-danger-500 dark:hover:text-white dark:hover:bg-danger-500 dark:focus:ring-danger-800",
        _ => string.Empty
        };

    private string RoundClasses => Roundness switch {
        ButtonRoundness.Default => "rounded-lg",
        ButtonRoundness.Full => "rounded-full",
        _ => string.Empty
        };

    private string SizeClasses => Size switch {
        ButtonSize.ExtraSmall => "px-3 py-2 text-xs",
        ButtonSize.Small => "px-3 py-2 text-sm",
        ButtonSize.Base => "px-5 py-2.5 text-sm",
        ButtonSize.Large => "px-5 py-3 text-base",
        ButtonSize.ExtraLarge => "px-6 py-3.5 text-base",
        _ => string.Empty
        };

    private string DisabledClasses => "opacity-50 cursor-not-allowed";

    private string FlexClasses => "inline-flex items-center";

    private void BuildClasses() {
        ClassBuilder.Clear();
        if (!Custom) {
            ClassBuilder
                .Add(BaseClass)
                .Add(SizeClasses)
                .Add(RoundClasses)
                .AddIfElse(Outline, OutlineClasses, ColorClasses)
                .AddIf(Flex || IsLoading, FlexClasses)
                .AddIf(IsDisabled, DisabledClasses);
        }

        ClassBuilder.Add(Class);

        _finalClass = ClassBuilder.ToString();
    }
    
    private async Task Click(MouseEventArgs args) {
        if (IsDisabled || IsLoading) return;
        
        if (OnClick.HasDelegate)
            await OnClick.InvokeAsync(args);

        if (OnClickAsync.HasDelegate) {
            _clickLoading = true;
            BuildClasses();
            StateHasChanged();  // Required because we are in the middle of the task
            
            await OnClickAsync.InvokeAsync(args);
            
            _clickLoading = false;
            BuildClasses();
        }
    }

    private void OnTaskContinue(Task t) {
        if (t != Task) return;

        if (_taskLoading) {
            _taskLoading = false;
            BuildClasses();
            InvokeAsync(StateHasChanged);
        }
    }

    private void HandleTask() {
        _taskLoading = false;
        
        if (Task is null) return;

        // Set to true only if the task is still running
        if (Task.Status <= TaskStatus.WaitingForChildrenToComplete) {
            _taskLoading = true;
            Task.ContinueWith(OnTaskContinue);
        }
        
        BuildClasses();
    }

    protected override void OnInitialized() {
        base.OnInitialized();
        BuildClasses();
    }

    public override async Task SetParametersAsync(ParameterView parameters) {
        var buildClasses = parameters.AreChanged(this, x =>
            x.Disabled, x => x.Custom, x => x.Class, x => x.Type, x => x.Outline,
            x => x.Size, x => x.Roundness, x => x.Flex, x => x.Loading);

        var handleTask = parameters.AreChanged(this, x => x.Task);

        await base.SetParametersAsync(parameters);
        
        if (buildClasses) BuildClasses();
        if (handleTask) HandleTask();
    }
}