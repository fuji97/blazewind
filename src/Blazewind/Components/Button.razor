@using Blazewind.Core.Helpers
@using System.Diagnostics
@using Blazewind.Core.Models
@inherits BlazewindDomComponent

<button type="button" @onclick="@OnClick"
        class="@_finalClass">
    @ChildContent
</button>

@code {
    private string _finalClass = string.Empty;
    
    protected override string BaseClass => "focus:ring-4 font-medium mr-2 mb-2 focus:outline-none";
    
    [Parameter]
    public bool Custom { get; set; } = false;

    [Parameter]
    public RenderFragment ChildContent { get; set; } = null!;
    
    [Parameter]
    public bool Disabled { get; set; }

    [Parameter]
    public ButtonType Type { get; set; } = ButtonType.Default;
    
    [Parameter]
    public ButtonRoundness Roundness { get; set; } = ButtonRoundness.Default;
    
    [Parameter]
    public bool Outline { get; set; } = false;
    
    [Parameter]
    public ButtonSize Size { get; set; } = ButtonSize.Base;
    
    [Parameter]
    public string? StartIcon { get; set; }
    
    [Parameter]
    public string? EndIcon { get; set; }
    
    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }

    private string ColorClasses => Type switch {
        ButtonType.Default => "text-white bg-primary-700 hover:bg-primary-800 focus:ring-primary-300 dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800",
        ButtonType.Alternative => "text-gray-900 bg-white border-gray-200 hover:bg-gray-100 hover:text-primary-700 focus:ring-gray-200 dark:focus:ring-gray-700 dark:bg-gray-800 dark:text-gray-400 dark:border-gray-600 dark:hover:text-white dark:hover:bg-gray-700",
        ButtonType.Dark => "text-white bg-gray-800 hover:bg-gray-900 focus:ring-gray-300 dark:bg-gray-800 dark:hover:bg-gray-700 dark:focus:ring-gray-700 dark:border-gray-700",
        ButtonType.Light => "text-gray-900 bg-white border-gray-300 hover:bg-gray-100 focus:ring-gray-200 dark:bg-gray-800 dark:text-white dark:border-gray-600 dark:hover:bg-gray-700 dark:hover:border-gray-600 dark:focus:ring-gray-700",
        ButtonType.Success => "text-white bg-success-700 hover:bg-success-800 focus:ring-success-300 dark:bg-success-600 dark:hover:bg-success-700 dark:focus:ring-success-800",
        ButtonType.Info => "text-white bg-info-700 hover:bg-info-800 focus:ring-info-300 dark:bg-info-600 dark:hover:bg-info-700 dark:focus:ring-info-800",
        ButtonType.Warning => "text-white bg-warning-700 hover:bg-warning-800 focus:ring-warning-300 dark:bg-warning-600 dark:hover:bg-warning-700 dark:focus:ring-warning-800",
        ButtonType.Danger => "text-white bg-danger-700 hover:bg-danger-800 focus:ring-danger-300 dark:bg-danger-600 dark:hover:bg-danger-700 dark:focus:ring-danger-800",
        _ => string.Empty
    };
    
    private string OutlineClasses => Type switch {
        ButtonType.Default => "text-primary-700 hover:text-white border border-primary-700 hover:bg-primary-800 focus:ring-primary-300 dark:border-primary-500 dark:text-primary-500 dark:hover:text-white dark:hover:bg-primary-500 dark:focus:ring-primary-800",
        ButtonType.Alternative or ButtonType.Dark or ButtonType.Light => 
            "text-gray-700 hover:text-white border border-gray-700 hover:bg-gray-800 focus:ring-gray-300 dark:border-gray-500 dark:text-gray-500 dark:hover:text-white dark:hover:bg-gray-500 dark:focus:ring-gray-800",
        ButtonType.Success => "text-success-700 hover:text-white border border-success-700 hover:bg-success-800 focus:ring-success-300 dark:border-success-500 dark:text-success-500 dark:hover:text-white dark:hover:bg-success-500 dark:focus:ring-success-800",
        ButtonType.Info => "text-info-700 hover:text-white border border-info-700 hover:bg-info-800 focus:ring-info-300 dark:border-info-500 dark:text-info-500 dark:hover:text-white dark:hover:bg-info-500 dark:focus:ring-info-800",
        ButtonType.Warning => "text-warning-700 hover:text-white border border-warning-700 hover:bg-warning-800 focus:ring-warning-300 dark:border-warning-500 dark:text-warning-500 dark:hover:text-white dark:hover:bg-warning-500 dark:focus:ring-warning-800",
        ButtonType.Danger => "text-danger-700 hover:text-white border border-danger-700 hover:bg-danger-800 focus:ring-danger-300 dark:border-danger-500 dark:text-danger-500 dark:hover:text-white dark:hover:bg-danger-500 dark:focus:ring-danger-800",
        _ => string.Empty
        };

    private string RoundClasses => Roundness switch {
        ButtonRoundness.Default => "rounded-lg",
        ButtonRoundness.Full => "rounded-full",
        _ => string.Empty
    };
    
    private string SizeClasses => Size switch {
        ButtonSize.ExtraSmall => "px-3 py-2 text-xs",
        ButtonSize.Small => "px-3 py-2 text-sm",
        ButtonSize.Base => "px-5 py-2.5 text-sm",
        ButtonSize.Large => "px-5 py-3 text-base",
        ButtonSize.ExtraLarge => "px-6 py-3.5 text-base",
        _ => string.Empty
    };
    
    private string DisabledClasses => "opacity-50 cursor-not-allowed";
    
    private string FlexClasses => "inline-flex items-center";

    private void BuildClasses() {
        ClassBuilder.Clear();
        if (!Custom) 
        {
            ClassBuilder
                .Add(BaseClass)
                .Add(SizeClasses)
                .Add(RoundClasses)
                .AddIfElse(Outline, OutlineClasses, ColorClasses)
                .AddIf(StartIcon != null || EndIcon != null, FlexClasses)
                .AddIf(Disabled, DisabledClasses);
        }

        ClassBuilder.Add(Class);
        
        _finalClass = ClassBuilder.ToString();
    }
    
    protected override void OnInitialized() {
        base.OnInitialized();
        BuildClasses();
    }

    public override async Task SetParametersAsync(ParameterView parameters) {
        await base.SetParametersAsync(parameters);
        if (parameters.AreChanged(this, 
            x => x.Disabled, 
            x => x.Custom, 
            x => x.Class, 
            x => x.Type, 
            x => x.Outline, 
            x => x.Size, 
            x => x.Roundness))
            BuildClasses();
    }
}